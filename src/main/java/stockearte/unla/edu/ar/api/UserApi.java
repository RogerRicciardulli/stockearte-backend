/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.16).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package stockearte.unla.edu.ar.api;

import stockearte.unla.edu.ar.model.AsignUserToStoreRequest;
import stockearte.unla.edu.ar.model.AuthenticateUserRequest;
import stockearte.unla.edu.ar.model.CreateUserRequest;
import stockearte.unla.edu.ar.model.EditUserRequest;
import stockearte.unla.edu.ar.model.GetUserResponse;
import stockearte.unla.edu.ar.model.UserResponse;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@Api(value = "user", description = "the user API")
public interface UserApi {

    @ApiOperation(value = "Assign a user to a store", nickname = "userAssignStorePost", notes = "", response = UserResponse.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "User assigned to store successfully", response = UserResponse.class) })
    @RequestMapping(value = "/user/assign-store",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<UserResponse> userAssignStorePost(@ApiParam(value = "Assign user to store request" ,required=true )  @Valid @RequestBody AsignUserToStoreRequest body
);


    @ApiOperation(value = "Authenticate a user", nickname = "userAuthenticatePost", notes = "", response = UserResponse.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Authentication successful", response = UserResponse.class),
        @ApiResponse(code = 401, message = "Authentication failed") })
    @RequestMapping(value = "/user/authenticate",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<UserResponse> userAuthenticatePost(@ApiParam(value = "User authentication request" ,required=true )  @Valid @RequestBody AuthenticateUserRequest body
);


    @ApiOperation(value = "Create a new user", nickname = "userCreatePost", notes = "", response = UserResponse.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "User created successfully", response = UserResponse.class) })
    @RequestMapping(value = "/user/create",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<UserResponse> userCreatePost(@ApiParam(value = "User creation request" ,required=true )  @Valid @RequestBody CreateUserRequest body
);


    @ApiOperation(value = "Edit an existing user", nickname = "userEditPut", notes = "", response = UserResponse.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "User updated successfully", response = UserResponse.class) })
    @RequestMapping(value = "/user/edit",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<UserResponse> userEditPut(@ApiParam(value = "User editing request" ,required=true )  @Valid @RequestBody EditUserRequest body
);


    @ApiOperation(value = "Get details of a specific user", nickname = "userUserIdGet", notes = "", response = GetUserResponse.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "User details", response = GetUserResponse.class),
        @ApiResponse(code = 404, message = "User not found") })
    @RequestMapping(value = "/user/{userId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<GetUserResponse> userUserIdGet(@ApiParam(value = "The unique ID of the user",required=true) @PathVariable("userId") Integer userId
);

}
